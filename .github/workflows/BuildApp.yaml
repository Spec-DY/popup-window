name: Build Pyinstaller Client App
on:
  push:
    branches:
      - main
    paths:
      - "client/**"
      - ".github/workflows/BuildApp.yaml"

permissions:
  contents: write

# build job
jobs:
  build:
    runs-on: ${{ matrix.os }}
    name: Build Client App (${{ matrix.os }})
    strategy:
      matrix:
        os: [windows-latest, ubuntu-latest]
    steps:
      - name: 🍗Checkout code
        uses: actions/checkout@v4
      - name: 🍎Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.12"

      - name: 🍟Install dependencies (Windows)
        if: matrix.os == 'windows-latest'
        run: |
          python -m pip install --upgrade pip
          if (Test-Path "client/requirements.txt") { pip install -r client/requirements.txt }
          pip install pyinstaller
        shell: pwsh

      - name: 🍟Install dependencies (Linux)
        if: matrix.os == 'ubuntu-latest'
        run: |
          python -m pip install --upgrade pip
          if [ -f client/requirements.txt ]; then pip install -r client/requirements.txt; fi
          pip install pyinstaller
        shell: bash

      - name: 🌭Build the app (Windows)
        if: matrix.os == 'windows-latest'
        run: |
          pyinstaller --onefile --noconsole --add-data "client/assets/appicon.ico;." --add-data "client/assets/appicon.jpg;." --icon client/assets/appicon.ico client/client.py

      - name: 🍬Build the app (Ubuntu)
        if: matrix.os == 'ubuntu-latest'
        run: |
          pyinstaller --onefile --add-data "client/assets/appicon.ico:." --add-data "client/assets/appicon.jpg:." client/client.py

      - name: 🍩Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: client-${{ matrix.os }}
          path: ./dist/
          retention-days: 7

  # release job
  release:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: 🍗Checkout code (for server.py)
        uses: actions/checkout@v4

      - name: 🍭Generate timestamp version
        id: version
        run: |
          VERSION="v$(date +'%Y.%m.%d-%H%M%S')"
          echo "version=$VERSION" >> $GITHUB_OUTPUT

      - name: 📥Download artifacts
        uses: actions/download-artifact@v4
        with:
          path: ./artifacts

      - name: 📥Download existing release assets
        id: download_existing
        run: |
          echo "🔍 Checking for existing release..."
          LATEST_RELEASE=$(curl -s "https://api.github.com/repos/${{ github.repository }}/releases/latest" || echo "{}")

          # check current release
          if [ "$(echo $LATEST_RELEASE | jq -r '.message')" != "Not Found" ]; then
            echo "✅ Found existing release, downloading assets..."
            
            # create directory for existing assets
            mkdir -p ./existing-assets
            
            # download existing apk
            APK_URL=$(echo $LATEST_RELEASE | jq -r '.assets[] | select(.name | contains(".apk")) | .browser_download_url')
            if [ "$APK_URL" != "null" ] && [ -n "$APK_URL" ]; then
              echo "📱 Downloading existing APK..."
              curl -L -o "./existing-assets/$(basename $(echo $APK_URL))" "$APK_URL"
            fi
            
            # download existing files except client executables
            echo $LATEST_RELEASE | jq -r '.assets[] | select(.name | contains("server.py")) | .browser_download_url' | while read url; do
              if [ -n "$url" ]; then
                echo "📥 Downloading: $(basename $url)"
                curl -L -o "./existing-assets/$(basename $url)" "$url"
              fi
            done
            
            echo "existing_files=true" >> $GITHUB_OUTPUT
          else
            echo "ℹ️ No existing release found"
            echo "existing_files=false" >> $GITHUB_OUTPUT
          fi

      - name: 🍩Rename and prepare files
        run: |
          mkdir -p ./release

          # copy current files 
          if [ "${{ steps.download_existing.outputs.existing_files }}" == "true" ]; then
            cp -r ./existing-assets/* ./release/ 2>/dev/null || true
          fi

          # add new python file to release directory
          if [ -f ./artifacts/client-windows-latest/client.exe ]; then
            mv ./artifacts/client-windows-latest/client.exe ./release/client-${{ steps.version.outputs.version }}-windows.exe
          fi
          if [ -f ./artifacts/client-ubuntu-latest/client ]; then
            mv ./artifacts/client-ubuntu-latest/client ./release/client-${{ steps.version.outputs.version }}-ubuntu
          fi

          # add server.py file if it exists
          if [ -f ./server.py ]; then
            cp ./server.py ./release/server.py
          fi

          # clean up old files
          find ./release -name "client-v*-windows.exe" ! -name "client-${{ steps.version.outputs.version }}-windows.exe" -delete 2>/dev/null || true
          find ./release -name "client-v*-ubuntu" ! -name "client-${{ steps.version.outputs.version }}-ubuntu" -delete 2>/dev/null || true

          echo "=== Final release files ==="
          ls -la ./release/

      - name: 🍆Create Release and Upload Assets
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ steps.version.outputs.version }}
          name: Release ${{ steps.version.outputs.version }}
          body: |
            🚀 **Multi-Platform Release**

            Automatically built and released from commit ${{ github.sha }}

            ## 📋 Server Setup
            1. Clone repository and deploy `server.py` on your server
            2. Run `pip install -r requirements.txt` to install dependencies
            3. Run: `python3 server.py`
            4. Server will listen on port 12345 by default

            ## 💻 Desktop Clients
            1. Download the appropriate client for your OS
            2. Run the executable
            3. If server and client are on same device, use `127.0.0.1` as server address

            ## 📱 Mobile App (Android)
            1. Download the APK file
            2. Enable "Install from unknown sources" in Android settings
            3. Install the APK on your device
            4. Configure server address in the app

            ## 📦 Available Downloads

            - **Windows Desktop**: `client-${{ steps.version.outputs.version }}-windows.exe`
            - **Linux Desktop**: `client-${{ steps.version.outputs.version }}-ubuntu`
            - **Android Mobile**: `popups-${{ steps.version.outputs.version }}.apk`
            - **Server**: Clone repository for `server.py`

          files: ./release/*
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
